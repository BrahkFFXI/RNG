-------------------------------------------------------------------------------------------------------------------
-- Setup functions for this job.  Generally should not be modified.
-------------------------------------------------------------------------------------------------------------------
require('rnghelper')

-- Initialization function for this job file.
function get_sets()
    mote_include_version = 2

	-- Load and initialize the include file.
	include('Mote-Include.lua')
end


-- Setup vars that are user-independent.  state.Buff vars initialized here will automatically be tracked.
function job_setup()
	state.Buff.Barrage = buffactive.Barrage or false
	state.Buff.Camouflage = buffactive.Camouflage or false
	state.Buff['Unlimited Shot'] = buffactive['Unlimited Shot'] or false
end

-------------------------------------------------------------------------------------------------------------------
-- User setup functions for this job.  Recommend that these be overridden in a sidecar file.
-------------------------------------------------------------------------------------------------------------------

-- Setup vars that are user-dependent.  Can override this function in a sidecar file.
function user_setup()
	state.RangedMode:options('Normal', 'MidAcc', 'HighAcc')
	state.WeaponskillMode:options('Normal', 'Acc')

	send_command('bind f9 gs c cycle RangedMode')
	send_command('bind ^f9 gs c cycle OffenseMode')
end


-- Called when this job file is unloaded (eg: job change)
function user_unload()
	send_command('unbind f9')
	send_command('unbind ^f9')
end


-- Set up all gear sets.
function init_gear_sets()
	--------------------------------------
	-- Precast sets
	--------------------------------------

	-- Precast sets to enhance JAs
	sets.precast.JA['Bounty Shot'] = {hands="Sylvan Glovelettes +2"}
	sets.precast.JA['Double Shot'] = {head="Amini Gapette +1"}
	sets.precast.JA['Camouflage'] = {body="Orion Jerkin +2"}
	sets.precast.JA['Scavenge'] = {feet="Orion Socks +2"}
	sets.precast.JA['Shadowbind'] = {hands="Orion Bracers +2"}
	sets.precast.JA['Sharpshot'] = {legs="Orion Braccae +2"}
	sets.precast.JA['Eagle Eye Shot'] = {"Arcadian braccae +2"}


	-- Fast cast sets for spells

	sets.precast.FC = {
		head="Haruspex Hat",ear2="Loquacious Earring",
		hands="Thaumas Gloves",ring1="Prolix Ring"}

	sets.precast.FC.Utsusemi = set_combine(sets.precast.FC, {neck="Magoraga Beads"})


	-- Ranged sets (snapshot)
	
	sets.precast.RA = {
		head="Orion beret +3",
		body="Amini Caban +1",hands="Carmine Finger Gauntlets +1",
		back={ name="Belenus's Cape", augments={'Snapshot+10'}},
		waist="Yemaya Belt",legs="Orion Braccae +2",feet="Meg. Jam. +2"}


	-- Weaponskill sets
	-- Default set for any weaponskill that isn't any more specifically defined
	sets.precast.WS = {
		head="Orion beret +3",neck="Fotia Gorget",ear1="Moonshade Earring",ear2="Tripudio earring",
		body="Orion Jerkin +2",hands="Meghanada gloves +2",ring1="Dingir ring",ring2="Ilabrat ring",
		back={ name="Belenus's Cape", augments={'AGI+20','Rng.Acc.+20 Rng.Atk.+20','AGI+10','Weapon skill damage +10%',}},
		waist="Fotia Belt",legs="Arcadian braccae +2",feet="Arcadian Socks +1" }
		
	sets.precast.WS['Trueflight'] = set_combine(sets.precast.WS, {neck="Deviant Necklace",body="Samnuha Coat",
		back={ name="Belenus's Cape", augments={'AGI+20','Mag.Acc.+20 Mag.Dmg.+20','AGI+10','Weapon skill damage +10%',}},
		hands="Herculean gloves",Ear2="Friomisi Earring",ring2="Weatherspoon Ring",legs="Arcadian braccae +2",
		feet="Herculean boots"})
		
	sets.precast.WS['Coronach'] = set_combine(sets.precast.WS, {ear2="Sherida earring"})
	
	sets.precast.WS['Wildfire'] = set_combine(sets.precast.WS, {neck="Deviant Necklace",body="Samnuha Coat",
		back={ name="Belenus's Cape", augments={'AGI+20','Mag.Acc.+20 Mag.Dmg.+20','AGI+10','Weapon skill damage +10%',}},
		hands="Herculean gloves",Ear2="Friomisi Earring",ring2="Weatherspoon Ring",legs="Arcadian braccae +2",
		feet="Herculean boots"})

	sets.precast.WS.Acc = set_combine(sets.precast.WS, {body="Orion Jerkin +2",
		back="Lutian Cape",legs="Orion Braccae +2", feet="Orion socks +2"})

	-- Specific weaponskill sets.  Uses the base set if an appropriate WSMod version isn't found.


	--------------------------------------
	-- Midcast sets
	--------------------------------------

	-- Fast recast for spells
	
	sets.midcast.FastRecast = {
		head="Orion Beret +3",ear1="Loquacious Earring",
		ring1="Prolix Ring",
		waist="Pya'ekue Belt +1",legs="Orion Braccae +1",feet="Orion Socks +1"}

	sets.midcast.Utsusemi = {}

	-- Ranged sets

	sets.midcast.RA = {
		head="Arcadian Beret +1",neck="Iskur Gorget",ear1="Sherida earring",ear2="Tripudio Earring",
        body="Arcadian Jerkin +3",hands="Meghanada gloves +2",ring1="Ilabrat Ring",ring2="Rajas Ring",
        back={ name="Belenus's Cape", augments={'AGI+20','Rng.Acc.+20 Rng.Atk.+20','AGI+10','Store TP +10',}},
		waist="Kwahu Kachina Belt",legs="Arcadian braccae +2",feet="Arcadian Socks +1"}
		
	sets.midcast.RA.MidAcc = set_combine(sets.midcast.RA,{
		Body="Orion Jerkin +2",ear1="Enervating Earring",feet="Orion Socks +2"})
		
	sets.midcast.RA.HighAcc = set_combine(sets.midcast.RA.MidAcc,{
		head="Orion Beret +3",ear2="Clearview Earring",ring2="Hajduk Ring +1",
		legs="Orion Braccae +2",feet="Meg. Jam. +2"})

	--sets.midcast.RA.Annihilator = set_combine(sets.midcast.RA)

	--sets.midcast.RA.Annihilator.Acc = set_combine(sets.midcast.RA.MidAcc)

	
	--------------------------------------
	-- Idle/resting/defense/etc sets
	--------------------------------------

	-- Sets to return to when not performing an action.

	-- Resting sets
	sets.resting = {head="Meghanada visor +2",neck="Loricate Torque +1",
		hands="Meghanada Gloves +2",feet="Meghanada jambeaux +2"}

	-- Idle sets
	sets.idle = {
		head="Orion Beret +3",neck="Loricate Torque +1",ear1="Sanare Earring",ear2="Merman's Earring",
		body="Orion Jerkin +2",hands="Meghanada Gloves +2",ring1="Defending Ring",ring2="Patricius Ring",
		back="Moonbeam Cape",waist="Flume Belt",legs="Arcadian braccae +2",feet="Jute Boots +1"}
	sets.idle.Town = {
		head="Orion Beret +3",neck="Iskur Gorget",ear1="Sherida earring",ear2="Enervating earring",
		body="Arcadian Jerkin +3",hands="Meghanada Gloves +2",ring1="Dingir ring",ring2="Ilabrat ring",
		back={ name="Belenus's Cape", augments={'AGI+20','Rng.Acc.+20 Rng.Atk.+20','AGI+10','Store TP +10',}},
		waist="Kwahu Kachina belt",legs="Arcadian braccae +2",feet="Jute Boots +1"}
	
	-- Defense sets
	sets.defense.PDT = {
		head="Whirlpool Mask",neck="Twilight Torque",
		body="Orion Jerkin +2",hands="Orion Bracers +1",ring1="Defending Ring",ring2=gear.DarkRing.physical,
		back="Moonbeam Cape",waist="Flume Belt",legs="Nahtirah Trousers",feet="Orion Socks +1"}

	sets.defense.MDT = {
		head="Orion Beret +3",neck="Twilight Torque",
		body="Orion Jerkin +2",hands="Orion Bracers +1",ring1="Defending Ring",ring2="Shadow Ring",
		back="Moonbeam Cape",waist="Flume Belt",legs="Nahtirah Trousers",feet="Orion Socks +1"}

	sets.Kiting = {feet="Fajin Boots"}


	--------------------------------------
	-- Engaged sets
	--------------------------------------

	sets.engaged = {
		head="Whirlpool Mask",neck="Twilight Torque",ear1="Steelflash Earring",ear2="Bladeborn Earring",
		body="Orion Jerkin +2", hands="Arcadian Bracers +1", ring1="Defending Ring",ring2="Patricius Ring",
		back="Mecistopins Mantle",waist="Flume Belt",legs="Nahtirah Trousers",feet="Orion Socks +2"}

	sets.engaged.Acc = {
		head="Whirlpool Mask",neck="Asperity Necklace",ear1="Steelflash Earring",ear2="Bladeborn Earring",
		body="Manibozho Jerkin",hands="Iuitl Wristbands",ring1="K'ayres Ring",ring2="Patricius Ring",
		back="Letalis Mantle",waist="Windbuffet Belt",legs="Manibozho Brais",feet="Iuitl Gaiters"}

	--------------------------------------
	-- Custom buff sets
	--------------------------------------

	sets.buff.Barrage = set_combine(sets.midcast.RA.MidAcc, {hands="Orion Bracers +2"})
	sets.buff.Camouflage = {body="Orion Jerkin +2"}
end

-------------------------------------------------------------------------------------------------------------------
-- Job-specific hooks for standard casting events.
-------------------------------------------------------------------------------------------------------------------

-- Set eventArgs.handled to true if we don't want any automatic gear equipping to be done.
-- Set eventArgs.useMidcastGear to true if we want midcast gear equipped on precast.
--function job_precast(spell, action, spellMap, eventArgs)
	--if spell.action_type == 'Ranged Attack' then
		--state.CombatWeapon:set(player.equipment.range)
	--end

	--if spell.action_type == 'Ranged Attack' or
	  --(spell.type == 'WeaponSkill' and (spell.skill == 'Marksmanship' or spell.skill == 'Archery')) then
		--check_ammo(spell, action, spellMap, eventArgs)
	--end
	
	--if state.DefenseMode.value == 'None' and spell.type == 'WeaponSkill' then
		---- Don't gearswap for weaponskills when Defense is active.
		--eventArgs.handled = true
	--end
--end


-- Set eventArgs.handled to true if we don't want any automatic gear equipping to be done.
function job_midcast(spell, action, spellMap, eventArgs)
	if spell.action_type == 'Ranged Attack' and state.Buff.Barrage then
		equip(sets.buff.Barrage)
		eventArgs.handled = true
	end
end

function job_midcast(spell, action, spellMap, eventArgs)
	if spell.action_type == 'Ranged Attack' and state.Buff.Doubleshot then
		equip(sets.buff.Doubleshot)
		eventArgs.handled = true
	end
end

-------------------------------------------------------------------------------------------------------------------
-- Job-specific hooks for non-casting events.
-------------------------------------------------------------------------------------------------------------------

-- Called when a player gains or loses a buff.
-- buff == buff gained or lost
-- gain == true if the buff was gained, false if it was lost.
function job_buff_change(buff, gain)
	if buff == "Camouflage" then
		if gain then
			equip(sets.buff.Camouflage)
			disable('body')
		else
			enable('body')
		end
	end
end

-------------------------------------------------------------------------------------------------------------------
-- User code that supplements standard library decisions.
-------------------------------------------------------------------------------------------------------------------

-- Set eventArgs.handled to true if we don't want the automatic display to be run.
function display_current_job_state(eventArgs)

end

-------------------------------------------------------------------------------------------------------------------
-- Utility functions specific to this job.
-------------------------------------------------------------------------------------------------------------------

-- Check for proper ammo when shooting or weaponskilling
function check_ammo(spell, action, spellMap, eventArgs)
	-- Filter ammo checks depending on Unlimited Shot
	if state.Buff['Unlimited Shot'] then
		if player.equipment.ammo ~= U_Shot_Ammo[player.equipment.range] then
			if player.inventory[U_Shot_Ammo[player.equipment.range]] or player.wardrobe[U_Shot_Ammo[player.equipment.range]] then
				add_to_chat(122,"Unlimited Shot active. Using custom ammo.")
				equip({ammo=U_Shot_Ammo[player.equipment.range]})
			elseif player.inventory[DefaultAmmo[player.equipment.range]] or player.wardrobe[DefaultAmmo[player.equipment.range]] then
				add_to_chat(122,"Unlimited Shot active but no custom ammo available. Using default ammo.")
				equip({ammo=DefaultAmmo[player.equipment.range]})
			else
				add_to_chat(122,"Unlimited Shot active but unable to find any custom or default ammo.")
			end
		end
	else
		if player.equipment.ammo == U_Shot_Ammo[player.equipment.range] and player.equipment.ammo ~= DefaultAmmo[player.equipment.range] then
			if DefaultAmmo[player.equipment.range] then
				if player.inventory[DefaultAmmo[player.equipment.range]] then
					add_to_chat(122,"Unlimited Shot not active. Using Default Ammo")
					equip({ammo=DefaultAmmo[player.equipment.range]})
				else
					add_to_chat(122,"Default ammo unavailable.  Removing Unlimited Shot ammo.")
					equip({ammo=empty})
				end
			else
				add_to_chat(122,"Unable to determine default ammo for current weapon.  Removing Unlimited Shot ammo.")
				equip({ammo=empty})
			end
		elseif player.equipment.ammo == 'empty' then
			if DefaultAmmo[player.equipment.range] then
				if player.inventory[DefaultAmmo[player.equipment.range]] then
					add_to_chat(122,"Using Default Ammo")
					equip({ammo=DefaultAmmo[player.equipment.range]})
				else
					add_to_chat(122,"Default ammo unavailable.  Leaving empty.")
				end
			else
				add_to_chat(122,"Unable to determine default ammo for current weapon.  Leaving empty.")
			end
		elseif player.inventory[player.equipment.ammo].count < 15 then
			add_to_chat(122,"Ammo '"..player.inventory[player.equipment.ammo].shortname.."' running low ("..player.inventory[player.equipment.ammo].count..")")
		end
	end
end



-- Select default macro book on initial load or subjob change.
function select_default_macro_book()
	set_macro_page(1, 11)
end
